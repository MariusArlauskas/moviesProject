security:
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER

    encoders:
        App\Entity\Users:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Users
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern:  ^/api/login_check
            stateless: true
            anonymous: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        logout:
            pattern:  ^/api/logout
            stateless: true
            anonymous: true

        register:
            pattern:  ^/api/register
            stateless: true
            anonymous: true

        api:
            pattern:  ^/api
            stateless: true
            anonymous: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        main:
            anonymous: true



    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/api/login_check, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/api/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/api/logout, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/api/movies, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/api/users, roles: [ROLE_USER] }
#         - { path: ^/api, roles: [ROLE_USER] }
         - { path: ^/api, roles: IS_AUTHENTICATED_ANONYMOUSLY }
